/*
 * YBLOB PROPRIETARY/CONFIDENTIAL.
 * 
 * yBlob Proprietary - USE PURSUANT TO COMPANY INSTRUCTIONS
 * USE of this information by anyone and for any purpose may only be 
 * made by the prior written consent of yBlob.  This 
 * confidential information is owned by yBlob, and is 
 * protected under United States copyright laws and international treaties.
 */
package com.branchitup.persistence.entities;

import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import com.branchitup.persistence.BookRole;
import com.branchitup.persistence.StatelessDAO;

@NamedNativeQueries({
//	@NamedNativeQuery(
//	    name="Publisher.select(publishedBookId)",
//	    resultClass=Publisher.class,
//	    query="SELECT DISTINCT u.userName,u.firstName,u.lastName FROM useraccounts AS u INNER JOIN publishedbooks AS p ON p.publisherUserName = u.userName WHERE p.bookId = ?publishedBookId;"
//	),
//	@NamedNativeQuery(
//	    name="Publisher.select(publishedBookId)",
//	    resultClass=Publisher.class,
//	    query="call `branchitup`.`Publisher.selectByBookId`(?publishedBookId)"
//	)
//	@NamedNativeQuery(
//	    name="Publisher.selectRecursive(publishedBookId)",
//	    resultClass=Publisher.class,
//	    query="call `branchitup`.`Publisher.selectRecursiveByBookId`(?publishedBookId)"
//	)
})
@NamedQueries({
	@NamedQuery(
	    name="Publisher.selectByPublicationId",
	    query="SELECT new Publisher(u.userAccountId, u.firstName, u.lastName, pb.publisherRoleMask,pb.parentId) FROM PublishedBook AS pb INNER JOIN pb.publisherAccount AS u WHERE pb.bookId = :publicationId"
	)
})
@IdClass(PublisherKey.class)
@Entity
public class Publisher extends BaseEntity{
	private static final long serialVersionUID = 1L;
	
	
//	@Column(name="bookId")
//	protected Long bookId;
	
	@Id
	@Column(name="userAccountId")
	protected Long userAccountId;
	
	@Column(name="firstName")
	protected String firstName;
	
	@Column(name="lastName")
	protected String lastName;
	
	@Id
	@Column(name="roleMask")
	protected int roleMask;
	
	@Column(name="parentId")
	protected Long parentId;
	
	public Publisher(){}
	
	public Publisher(Long userAccountId, String firstName, String lastName, Integer roleMask, Long parentId){
		this.userAccountId = userAccountId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.roleMask = roleMask;
		this.parentId = parentId;
	}
	

	public String getFirstName() {
		return firstName;
	}

	public Long getUserAccountId() {
		return userAccountId;
	}

	public void setUserAccountId(Long userAccountId) {
		this.userAccountId = userAccountId;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public int getRoleMask() {
		return roleMask;
	}

	public void setRoleMask(int roleMask) {
		this.roleMask = roleMask;
	}

	public Long getParentId() {
		return parentId;
	}

	public void setParentId(Long parentId) {
		this.parentId = parentId;
	}

	/**
	 * returns a list of all roles extracted from the roleMask field
	 * 
	 * @return list of roles
	 */
	public List<BookRole> getPublisherRoles(){
		return StatelessDAO.toPublisherRoleList(this.roleMask);
//		List<BookRole> list = new ArrayList<BookRole>();
//		BookRole[] roles = BookRole.values();
//		for(int i = 0 ; i < roles.length ; i++){
//			if((this.roleMask & roles[i].maskVal) != 0){
//				list.add(roles[i]);
//			}
//		}
//		return list;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((userAccountId == null) ? 0 : userAccountId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
//		if (!super.equals(obj)){ //WHAT IS THAT?? GENERATED BY ECLIPSE
//			System.out.println("---EQUALS-----1--->F");
//			return false;
//		}
		if (getClass() != obj.getClass()){
			return false;
		}
		Publisher other = (Publisher) obj;
		if (userAccountId == null) {
			if (other.userAccountId != null){
				return false;
			}
		} else if (!userAccountId.equals(other.userAccountId)){
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return "Publisher [userAccountId=" + userAccountId + ", firstName="
				+ firstName + ", lastName=" + lastName + ", roleMask="
				+ roleMask + "]";
	}
	
	
}
